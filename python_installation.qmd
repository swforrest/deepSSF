---
title: "Setting Up Python"
format: html
---

There are a number of approaches to installing Python and its associated libraries. Firstly there is the Python language to install, but you will also need package and environment management functionality, which allows you can create isolated working environments (which can then be different between projects to minimise version conflicts and many other headaches), and download the packages (typically called libraries in Python parlance). 

For a minimal installation of Python and a package and environment manager I recommend [Miniconda](https://docs.anaconda.com/miniconda/). I found the instructions here: [https://eduand-alvarez.medium.com/setting-up-anaconda-on-your-windows-pc-6e39800c1afb](https://eduand-alvarez.medium.com/setting-up-anaconda-on-your-windows-pc-6e39800c1afb) to be very helpful, and I suggest following them closely (particularly with respect to adding conda to PATH), and if you are planning on using [Jupyter Notebooks](https://jupyter.org/) (which I use and recommend), then also complete Step 5.

Once you have Python and Miniconda installed, you will likely want an interface ('Integrated Development Environment', an IDE) to code in (such as RStudio for R users). I use [Visual Studio Code](https://code.visualstudio.com/), or 'VS Code' as I find the functionality similar to RStudio (and as I have become familiar with VS Code I prefer it to RStudio in some ways).

If you have worked in [R Markdown](https://rmarkdown.rstudio.com/) or [Quarto](https://quarto.org/) notebooks in RStudio before, then I suggest using either [Jupyter Notebooks](https://jupyter.org/) (what I use) or [Quarto](https://quarto.org/) documents in VS Code. Using these notebooks allow for chunks of code to be isolated and run, and the output to be displayed immediately below the code. To me this feels like a similar experience to working with R and RStudio, particularly if you already use R Markdown or Quarto documents - which I highly recommend for making your code and presentable and accessible! 

Additional benefits of working with Jupyter Notebooks is that they can be rendered by Quarto into polished documents, such as we have on this website, and that they can be added directly to Google Colab for access to GPUs and other cloud computing resources.

On this website, all of the R code was written in Quarto documents and all of the Python code was written in Jupyter Notebooks, both of which have been rendered by Quarto.