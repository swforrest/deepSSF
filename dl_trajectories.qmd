---
title: "Preparing data for DL model fitting"
author: "Scott Forrest"
format: html
---

## Loading packages

```{r}
#| warning=FALSE

library(tidyverse)
packages <- c("amt", "sf", "terra", "beepr", "tictoc")
walk(packages, require, character.only = T)

```

## Import deep learning trajectories

```{r}

dl_trajectory <- read_csv("Python/outputs/dl_trajectories/dl_trajectory_7641steps_1.csv")
head(dl_trajectory)

ggplot() +
  geom_path(data = dl_trajectory,
            aes(x = x, y = y, colour = yday)) +
  scale_colour_viridis_c() +
  coord_equal() +
  theme_bw()

# to convert to amt track:
# - create a column for time in posixct from the hour and yday columns
# dl_trajectory_amt <- dl_trajectory %>% mk_track(id = id,
#                                                 lon,
#                                            lat, 
#                                            time, 
#                                            all_cols = T,
#                                            crs = 4326) %>% 
#   transform_coords(crs_to = 3112, crs_from = 4326) # Transformation to GDA94 / 
# # Geoscience Australia Lambert (https://epsg.io/3112)

sim_data_all <- dl_trajectory %>% 
  mutate(id = "a") 

```

## Import multiple deep learning trajectories

```{r}

# read in multiple csv files with similar filenames and bind them together
sim_data_full_list <- 
  list.files("Python/outputs/dl_trajectories/isec_pres/", pattern = "*.csv", full.names = T)

sim_data_all <- grep("1000steps", sim_data_full_list, value = T) %>% 
  # grep("3000", x = ., value = T) %>% 
  map_dfr(read_csv, .id = "id")

# to check the initial locations of the simulated trajectories - 
# prior to removing the warmup period - these should be the same as the observed
# data
sim_data_all %>% group_by(id) %>% slice(1)

ggplot() +
  geom_path(data = sim_data_all,
            aes(x = x, y = y, colour = id)) +
  geom_point(data = sim_data_all |> slice(1),
            aes(x = x, y = y), colour = "red") +
  scale_colour_viridis_d() +
  coord_equal() +
  theme_bw() +
  theme(legend.position = "none")

# ggsave("outputs/sim_data_all.png", width = 150, height = 200, units = "mm", dpi = 600)

# sim_data_all <- sim_data_all %>% group_by transmute(id = id, x = x, y = y, t = rep(time_vector,10))

```

## Import data and clean

```{r}

buffalo <- read_csv("data/buffalo.csv")

# remove individuals that have poor data quality or less than about 3 months of data. 
# The "2014.GPS_COMPACT copy.csv" string is a duplicate of ID 2024, so we exlcude it
buffalo <- buffalo %>% filter(!node %in% c("2014.GPS_COMPACT copy.csv", 
                                           2029, 2043, 2265, 2284, 2346))

buffalo <- buffalo %>%  
  group_by(node) %>% 
  arrange(DateTime, .by_group = T) %>% 
  distinct(DateTime, .keep_all = T) %>% 
  arrange(node) %>% 
  mutate(ID = node)

buffalo_clean <- buffalo[, c(12, 2, 4, 3)]
colnames(buffalo_clean) <- c("id", "time", "lon", "lat")
attr(buffalo_clean$time, "tzone") <- "Australia/Queensland"
head(buffalo_clean)
tz(buffalo_clean$time)

buffalo_ids <- unique(buffalo_clean$id)

buffalo_all <- buffalo_clean %>% mk_track(id = id,
                                           lon,
                                           lat, 
                                           time, 
                                           all_cols = T,
                                           crs = 4326) %>% 
  transform_coords(crs_to = 3112, crs_from = 4326) # Transformation to GDA94 / 
# Geoscience Australia Lambert (https://epsg.io/3112)

buffalo_2005_1000samples <- buffalo_all %>% 
  filter(id == 2005) %>% 
  arrange(t_) |>  
  slice(1:100) |> 
  transmute(id = id, x = x_, y = y_, t = t_)

time_vector = buffalo_2005_1000samples$t

```

## Combine the datasets

```{r}

# combine the observed and simulated data
all_data <- bind_rows(buffalo_2005_1000samples, sim_data_all)

ggplot() +
  geom_path(data = sim_data_all,
            aes(x = x, y = y, colour = id)) +
  scale_colour_viridis_d() +
  geom_path(data = buffalo_2005_1000samples,
            aes(x = x, y = y), colour = "red") +
  coord_equal() +
  theme_bw()

```

## moveVis

```{r}

# install.packages("moveVis")
# library(moveVis)

```



## Calculate step lengths and turning angles etc

```{r}

dl_trajectory <- sim_data_all

hourly_lag <- 1

dl_trajectory <- dl_trajectory %>% mutate(
  
  x1 = x,
  y1 = y,
  x2 = lead(x1, n = hourly_lag, default = NA),
  y2 = lead(y1, n = hourly_lag, default = NA),
  # x2_cent = x2 - x1,
  # y2_cent = y2 - y1,
  # t2_ = lead(t_, n = hourly_lag, default = NA),
  # t_diff = round(difftime(t2_, t_, units = "hours"),0),
  # hour_t1 = lubridate::hour(t_),
  # yday_t1 = lubridate::yday(t_),
  # hour_t2 = lubridate::hour(t2_),
  # yday_t2 = lubridate::yday(t2_),
  # hour = lubridate::hour(t),
  
  sl = c(sqrt(diff(y)^2 + diff(x)^2), NA),
  log_sl = log(sl),
  bearing = c(atan2(diff(y), diff(x)), NA),
  # ta = c(NA, ifelse(diff(bearing) > pi, diff(bearing) - 2 * pi, diff(bearing))),
  ta = c(NA, ifelse(
    diff(bearing) > pi, diff(bearing)-(2*pi), ifelse(
      diff(bearing) < -pi, diff(bearing)+(2*pi), diff(bearing)))),
  cos_ta = cos(ta)
)

dl_trajectory <- dl_trajectory %>% filter(sl < 1250)

```

## Plot step lengths etc

```{r}

mean(dl_trajectory$sl, na.rm = T)
median(dl_trajectory$sl, na.rm = T)

ggplot() +
  geom_histogram(data = dl_trajectory,
                 aes(x = sl),
                 binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  scale_x_continuous("Step length (m)", limits = c(0, 1500)) +
  scale_y_continuous("Frequency") +
  theme_bw()

ggplot() +
  geom_histogram(data = dl_trajectory,
                 aes(x = sl),
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  scale_x_log10("log Step length (m)") +
  scale_y_continuous("Frequency") +
  theme_bw()

# ggsave("outputs/step_length.png", width = 150, height = 75, units = "mm", dpi = 600)

ggplot() +
  geom_histogram(data = dl_trajectory,
                 aes(x = bearing),
                 bins = 100,
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  theme_bw()

ggplot() +
  geom_histogram(data = dl_trajectory,
                 aes(x = ta),
                 bins = 100,
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  scale_x_continuous("Turning angle (radians)", limits = c(-pi, pi)) +
  scale_y_continuous("Frequency") +
  theme_bw()

# ggsave("outputs/turning_angle.png", width = 150, height = 75, units = "mm", dpi = 600)

```



```{r}

for(i in 0:23) {
print(ggplot() +
  geom_histogram(data = dl_trajectory |> filter(hour == i),
                 aes(x = sl),
                 binwidth = 25,
                 fill = "orange",
                 colour = "black") +
    scale_x_continuous(limits = c(0, 1500)) +
    ggtitle(paste0("Hour: ", i)) +
  theme_bw())
}

```

```{r}

for(i in 0:23) {
print(ggplot() +
  geom_histogram(data = dl_trajectory |> filter(hour == i),
                 aes(x = ta),
                 bins = 50,
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
    ggtitle(paste0("Hour: ", i)) +
  theme_bw())
}

```

## Import data and clean

```{r}

buffalo <- read_csv("data/buffalo.csv")

# remove individuals that have poor data quality or less than about 3 months of data. 
# The "2014.GPS_COMPACT copy.csv" string is a duplicate of ID 2024, so we exlcude it
buffalo <- buffalo %>% filter(!node %in% c("2014.GPS_COMPACT copy.csv", 
                                           2029, 2043, 2265, 2284, 2346))

buffalo <- buffalo %>%  
  group_by(node) %>% 
  arrange(DateTime, .by_group = T) %>% 
  distinct(DateTime, .keep_all = T) %>% 
  arrange(node) %>% 
  mutate(ID = node)

buffalo_clean <- buffalo[, c(12, 2, 4, 3)]
colnames(buffalo_clean) <- c("id", "time", "lon", "lat")
attr(buffalo_clean$time, "tzone") <- "Australia/Queensland"
head(buffalo_clean)
tz(buffalo_clean$time)

buffalo_ids <- unique(buffalo_clean$id)

```

## Setup trajectory

Use the `amt` package to create a trajectory object from the cleaned data. 

```{r}

buffalo_all <- buffalo_clean %>% mk_track(id = id,
                                           lon,
                                           lat, 
                                           time, 
                                           all_cols = T,
                                           crs = 4326) %>% 
  transform_coords(crs_to = 3112, crs_from = 4326) # Transformation to GDA94 / 
# Geoscience Australia Lambert (https://epsg.io/3112)

```

Plot the data coloured by time

```{r}

# buffalo_all %>%
#   ggplot(aes(x = x_, y = y_, colour = t_)) +
#   geom_point(alpha = 0.25, size = 1) + # colour = "black",
#   coord_fixed() +
#   scale_colour_viridis_c() +
#   theme_classic()

```

### Reading in the environmental covariates

```{r}

ndvi_projected <- rast("mapping/cropped rasters/ndvi_GEE_projected_watermask20230207.tif")
terra::time(ndvi_projected) <- as.POSIXct(lubridate::ymd("2018-01-01") + months(0:23))
slope <- rast("mapping/cropped rasters/slope_raster.tif")
veg_herby <- rast("mapping/cropped rasters/veg_herby.tif")
canopy_cover <- rast("mapping/cropped rasters/canopy_cover.tif")

# change the names (these will become the column names when extracting 
# covariate values at the used and random steps)
names(ndvi_projected) <- rep("ndvi", terra::nlyr(ndvi_projected))
names(slope) <- "slope"
names(veg_herby) <- "veg_herby"
names(canopy_cover) <- "canopy_cover"

# plot the rasters
# plot(ndvi_projected)
plot(slope)
# writeRaster(slope, "mapping/cropped rasters/slope.tif", overwrite = T)
# plot(veg_herby)
# plot(canopy_cover)

```

Plots for ISEC presentation

```{r}

x_gamma <- seq(0, 1000, 1)
plot(x_gamma, dgamma(x_gamma, 2, scale = 100), type = "l", col = "black", xlab = "Distance (m)", ylab = "Density", main = "Gamma distribution")

install.packages("geostats")
library(geostats)
# von mises distribution
x_von_mises <- seq(-pi, pi, 0.01)
plot(x_von_mises, geostats::vonMises(a = x_von_mises, mu = 0, kappa = 1), type = "l", col = "black", xlab = "Angle (radians)", ylab = "Density", main = "Von Mises distribution", ylim = c(0, 0.375))



```


Late dry season NDVI for simulations (same as in the Ecography SSF paper for comparison)

```{r}

ndvi_2018_late_dry <- ndvi_projected[[8:10]]
ndvi_2019_late_dry <- ndvi_projected[[19:21]]
ndvi <- terra::mean(c(ndvi_2018_late_dry, ndvi_2019_late_dry))
names(ndvi) <- "NDVI"
plot(ndvi)
# 
# writeRaster(ndvi, "mapping/cropped rasters/ndvi_2018-19_late_dry.tif", overwrite = T)

```

## Extract covariate values at simulated locations

```{r}

dl_trajectory_xy <- data.frame("x" = dl_trajectory$x, "y" = dl_trajectory$y)

dl_trajectory <- dl_trajectory |> mutate(
  ndvi = terra::extract(ndvi, dl_trajectory_xy)[,2],
  slope = extract(slope, dl_trajectory_xy)[,2],
  veg_herby = extract(veg_herby, dl_trajectory_xy)[,2],
  canopy_cover = extract(canopy_cover, dl_trajectory_xy)[,2]
)

dl_trajectory

```
# Hourly movement behaviour and selection of covariates

Here we bin the trajectories into the hours of the day, and calculate the mean, median (where appropriate) and sd values for the step lengths and four habitat covariates.

We also save the results as a csv to compare between all of the models.

```{r}

# buffalo_hourly_habitat <- 
#   buffalo_data %>% dplyr::group_by(hour, id) %>% 
#   summarise(n = n(),
#             step_length_mean = mean(sl_),
#             step_length_median = median(sl_),
#             step_length_sd = sd(sl_),
#             ndvi_mean = mean(ndvi_dry),
#             ndvi_median = median(ndvi_dry),
#             ndvi_sd = sd(ndvi_dry),
#             herby_mean = mean(veg_herby),
#             herby_sd = sd(veg_herby),
#             canopy_mean = mean(canopy_cover/100),
#             canopy_sd = sd(canopy_cover/100),
#             slope_mean = mean(slope),
#             slope_median = median(slope),
#             slope_sd = sd(slope)
#             ) %>% ungroup()
# 
# buffalo_hourly_habitat <- data.frame("data" = "buffalo", buffalo_hourly_habitat) %>% 
#   mutate(id = as.factor(id))
# 
# write.csv(buffalo_hourly_habitat,
#           paste0("outputs/buffalo_summaries_hourly_habitat_", Sys.Date(), ".csv"))
# 
# buffalo_hourly_habitat_long <- buffalo_hourly_habitat %>%
#   pivot_longer(cols = !c(data, hour, id), names_to = "variable", values_to = "value")

dl_hourly_habitat <- 
  dl_trajectory %>% dplyr::group_by(hour) %>% 
  summarise(n = n(),
            step_length_mean = mean(sl),
            step_length_median = median(sl),
            step_length_sd = sd(sl),
            ndvi_mean = mean(ndvi),
            ndvi_median = median(ndvi),
            ndvi_sd = sd(ndvi),
            herby_mean = mean(veg_herby),
            herby_sd = sd(veg_herby),
            canopy_mean = mean(canopy_cover/100),
            canopy_sd = sd(canopy_cover/100),
            slope_mean = mean(slope),
            slope_median = median(slope),
            slope_sd = sd(slope)
            ) %>% ungroup()

dl_hourly_habitat <- data.frame("data" = "dl", dl_hourly_habitat) #%>% 
  # mutate(id = as.factor(id))

# write.csv(dl_hourly_habitat,
#           paste0("outputs/dl_summaries_hourly_habitat_", Sys.Date(), ".csv"))

dl_hourly_habitat_long <- dl_hourly_habitat %>%
  pivot_longer(cols = !c(data, hour), names_to = "variable", values_to = "value")

# combine the dataframe
# hourly_habitat_long <- bind_rows(buffalo_hourly_habitat_long, sim_hourly_habitat_long)

```

Plotting the hourly habitat selection

```{r}

for(i in 1:length(unique(dl_hourly_habitat_long$variable))) {

  print(ggplot(data = dl_hourly_habitat_long %>%
                 filter(variable == unique(variable)[i]),
               aes(x = factor(hour), y = value, colour = data)) +
          geom_point() +
          ggtitle(unique(dl_hourly_habitat_long$variable)[i]) +
          theme_classic())

}

```

### A quantile ribbon approach

To express the stochasticity of the simulations, here we show the 25th to 50th quantiles and the 2.5th to 97.5th quantiles of the data. Remember that the `data' are the means for each hour for each trajectory, so the quantiles are calculated across the means for each hour.

This is the plotting approach that we used in the paper.

Here we create a ribbon from the 25th to 50th quantiles and from the 2.5th to 97.5th quantiles of the data

```{r}

hourly_summary_quantiles <- summaries_hourly_all_long %>% 
  dplyr::group_by(Data, hour, variable) %>% 
  summarise(n = n(), 
            mean = mean(value, na.rm = TRUE),
            sd = sd(value, na.rm = TRUE),
            q025 = quantile(value, probs = 0.025, na.rm = TRUE), 
            q25 = quantile(value, probs = 0.25, na.rm = TRUE),
            q50 = quantile(value, probs = 0.5, na.rm = TRUE), 
            q75 = quantile(value, probs = 0.75, na.rm = TRUE),
            q975 = quantile(value, probs = 0.975, na.rm = TRUE))

```

Here we show the hourly step length and selection of three of the habitat covariates. We use a dashed-line ribbon for the 95% interval and a solid-line ribbon for the 50% interval. We show the mean as a solid line.

It's quite a long plotting script...

```{r}

# set plotting parameters here that will change in each plot
buff_path_alpha <- 0.1
ribbon_95_alpha <- 0.1
ribbon_50_alpha <- 0.15
path_95_alpha <- 1

hourly_path_sl_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = summaries_hourly_all_long_subset %>% 
              filter(Data == "Buffalo" & variable == "step_length_mean"),
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)),
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_x_discrete("Hour", breaks = seq(0,24,3)) +
  scale_y_continuous("Mean value") +
  ggtitle("Step length (m)") +
  theme_classic()

hourly_path_sl_plot
  
  
hourly_path_ndvi_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = summaries_hourly_all_long_subset %>% 
              filter(Data == "Buffalo" & variable == "ndvi_mean"),
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)),
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) +
  scale_colour_manual(values = colors) +
  scale_x_discrete("Hour", breaks = seq(0,24,3)) +
  scale_y_continuous("Mean value") +
  ggtitle("NDVI") +
  theme_classic()

hourly_path_ndvi_plot
    
    
hourly_path_herby_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = summaries_hourly_all_long_subset %>% 
              filter(Data == "Buffalo" & variable == "herby_mean"), 
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)), 
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_x_discrete("Hour", breaks = seq(0,24,3)) +
  scale_y_continuous("Mean value") +
  ggtitle("Herbaceous vegetation") +
  theme_classic()

hourly_path_herby_plot
    
    
hourly_path_canopy_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = summaries_hourly_all_long_subset %>% 
              filter(Data == "Buffalo" & variable == "canopy_mean"), 
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)), 
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_x_discrete("Hour", breaks = seq(0,24,3)) +
  scale_y_continuous("Mean value") +
  ggtitle("Canopy cover") +
  theme_classic()

hourly_path_canopy_plot

```

Combining the hourly plots

```{r}

ggarrange(hourly_path_sl_plot + 
            theme(axis.title.x = element_blank(),
                  axis.text.x = element_blank()), 
          
          hourly_path_ndvi_plot + 
            theme(axis.title.x = element_blank(),
                  axis.text.x = element_blank(),
                  axis.title.y = element_blank()), 
          
          hourly_path_herby_plot, 
          
          hourly_path_canopy_plot +
            theme(axis.title.y = element_blank()),
          
          labels = c("A", "B", "C", "D"),
          ncol = 2, nrow = 2,
          legend = "bottom",
          common.legend = TRUE)

ggsave(paste0("outputs/plots/manuscript_figs_R1/NOmem_hourly_path_mean_all_", 
              Sys.Date(), ".png"),
       width=150, height=120, units="mm", dpi = 600)

```