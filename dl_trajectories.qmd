---
title: "Preparing data for DL model fitting"
author: "Scott Forrest"
date: "`r Sys.Date()`"
execute: 
  cache: false
bibliography: references.bib
toc: true
number-sections: false
format: 
  html:
    self-contained: true
    code-fold: show
    code-tools: true
    df-print: paged
    code-line-numbers: true
    code-overflow: scroll
    fig-format: png
    fig-dpi: 300
  pdf:
    geometry: 
      - top=30mm
      - left=30mm
editor:
  source
---

## Loading packages

```{r}

options(scipen = 999)

library(tidyverse)
packages <- c("amt", "sf", "terra", "beepr", "tictoc", "viridis", "scales", "ggpubr", "patchwork", "zoo")
walk(packages, require, character.only = T)

```

# Reading in the environmental covariates

```{r}

ndvi_projected <- rast("mapping/cropped rasters/ndvi_GEE_projected_watermask20230207.tif")
# terra::time(ndvi_projected) <- as.POSIXct(lubridate::ymd("2018-01-01") + months(0:23))
slope <- rast("mapping/cropped rasters/slope_raster.tif")
veg_herby <- rast("mapping/cropped rasters/veg_herby.tif")
canopy_cover <- rast("mapping/cropped rasters/canopy_cover.tif")

# change the names (these will become the column names when extracting 
# covariate values at the used and random steps)
names(ndvi_projected) <- rep("ndvi", terra::nlyr(ndvi_projected))
names(slope) <- "slope"
names(veg_herby) <- "veg_herby"
names(canopy_cover) <- "canopy_cover"

# plot the rasters
# plot(ndvi_projected)
# plot(slope)
# writeRaster(slope, "mapping/cropped rasters/slope.tif", overwrite = T)
# plot(veg_herby)
# plot(canopy_cover)

```

Late dry season NDVI for simulations (same as in the Ecography SSF paper for comparison)

```{r}

ndvi_2018_late_dry <- ndvi_projected[[8:10]]
ndvi_2019_late_dry <- ndvi_projected[[19:21]]
ndvi_late_dry <- terra::mean(c(ndvi_2018_late_dry, ndvi_2019_late_dry))
names(ndvi_late_dry) <- "NDVI"
ndvi_late_dry[is.na(ndvi_late_dry)] <- -1
plot(ndvi_late_dry)
# 
# writeRaster(ndvi_late_dry, "mapping/cropped rasters/ndvi_2018-19_late_dry.tif", overwrite = T)

# for ggplot
ndvi_late_dry_df <- as.data.frame(ndvi_late_dry, xy = TRUE)

hist(ndvi_late_dry_df$NDVI, breaks = 100)
NDVI_quantiles <- quantile(ndvi_late_dry_df$NDVI, probs = c(0.01, 0.99))
NDVI_breaks <- seq(0, NDVI_quantiles[2], length.out = 9)

# habitat_predictions_binned <- habitat_predictions %>% mutate(
#   NDVI_bins = cut(habitat_predictions$NDVI, breaks = NDVI_breaks),

ndvi_late_dry_df$ndvi_dry_discrete <- cut(ndvi_late_dry_df$NDVI, breaks=NDVI_breaks, dig.lab = 2)

```

## Import data and clean

```{r}

buffalo <- read_csv("data/buffalo.csv")

# remove individuals that have poor data quality or less than about 3 months of data. 
# The "2014.GPS_COMPACT copy.csv" string is a duplicate of ID 2024, so we exlcude it
buffalo <- buffalo %>% filter(!node %in% c("2014.GPS_COMPACT copy.csv", 
                                           2029, 2043, 2265, 2284, 2346))

buffalo <- buffalo %>%  
  group_by(node) %>% 
  arrange(DateTime, .by_group = T) %>% 
  distinct(DateTime, .keep_all = T) %>% 
  arrange(node) %>% 
  mutate(ID = node)

buffalo_clean <- buffalo[, c(12, 2, 4, 3)]
colnames(buffalo_clean) <- c("id", "time", "lon", "lat")
attr(buffalo_clean$time, "tzone") <- "Australia/Queensland"
head(buffalo_clean)
tz(buffalo_clean$time)

buffalo_ids <- unique(buffalo_clean$id)

buffalo_all <- buffalo_clean %>% mk_track(id = id,
                                           lon,
                                           lat, 
                                           time, 
                                           all_cols = T,
                                           crs = 4326) %>% 
  transform_coords(crs_to = 3112, crs_from = 4326) # Transformation to GDA94 / 
# Geoscience Australia Lambert (https://epsg.io/3112)

buffalo_all <- buffalo_all |> arrange(id, t_) |> ungroup()

ggplot() +
  geom_point(data = buffalo_all |> filter(id == 2005),
            aes(x = x_, y = y_, colour = id)) +
  scale_colour_viridis_d() +
  coord_equal() +
  theme_bw() #+
  # theme(legend.position = "none")

```

```{r}

# buffalo_all
# 
# buffalo_all_nested <- buffalo_all %>% nest()
# # dl_track <- dl_trajectory %>% amt::mk_track(x, y, t1, all_cols = T, crs = 3112)
# dl_steps <- dl_track %>% filter(id == 1) %>% amt::steps(keep_cols = "both")
# dl_steps

```


## Calculate step info

```{r}

hourly_lag <- 1

buffalo_all <- buffalo_all %>% mutate(
  
  x1 = x_,
  y1 = y_,
  x2 = lead(x1, n = hourly_lag, default = NA),
  y2 = lead(y1, n = hourly_lag, default = NA),
  # x2_cent = x2 - x1,
  # y2_cent = y2 - y1,
  # t2_ = lead(t_, n = hourly_lag, default = NA),
  # t_diff = round(difftime(t2_, t_, units = "hours"),0),
  hour_t1 = lubridate::hour(t_),
  hour_t2 = lead(hour_t1, n = hourly_lag, default = NA),
  # yday_t1 = lubridate::yday(t_),
  # hour_t2 = lubridate::hour(t2_),
  # yday_t2 = lubridate::yday(t2_),
  # hour = lubridate::hour(t),
  
  sl = c(sqrt(diff(y_)^2 + diff(x_)^2), NA),
  log_sl = log(sl),
  bearing = c(atan2(diff(y_), diff(x_)), NA),
  # ta = c(NA, ifelse(diff(bearing) > pi, diff(bearing) - 2 * pi, diff(bearing))),
  ta = c(NA, ifelse(
    diff(bearing) > pi, diff(bearing)-(2*pi), ifelse(
      diff(bearing) < -pi, diff(bearing)+(2*pi), diff(bearing)))),
  cos_ta = cos(ta)
)

```

### Check distribution of step lengths

```{r}

buffalo_all <- buffalo_all %>% filter(sl < 5000)

hist(buffalo_all$sl, breaks = max(buffalo_all$sl, na.rm = T)/25)
quantile(buffalo_all$sl, probs = c(0.5, 0.9, 0.95, 0.957, 0.96, 0.97, 0.99, 0.999, 1), na.rm = T)
hist(buffalo_all$log_sl, breaks = 100)

mean(buffalo_all$sl)

hist(buffalo_all$ta, breaks = 100)
quantile(buffalo_all$ta, probs = c(0.5, 0.9, 0.95, 0.99, 0.999, 1), na.rm = T)
hist(buffalo_all$cos_ta, breaks = 100)

mean(buffalo_all$ta)

hist(buffalo_all$bearing, breaks = 100)

```

## Plotting at local extent

```{r}

buffer <- 000

# min_x <- 46500
# max_x <- 49000
# min_y <- -1435517.707409
# max_y <- -1432500.624901

centrepoint <- c(47740.841716, -1433609.844645)
centrepoint_buffer <- 1250
min_x <- centrepoint[1] - centrepoint_buffer
max_x <- centrepoint[1] + centrepoint_buffer
min_y <- centrepoint[2] - centrepoint_buffer
max_y <- centrepoint[2] + centrepoint_buffer

plot_extent <- c(min_x, min_y, max_x, max_y)

# set the extent of the plot
# plot_extent <- sim_data_all %>%
#   summarise(min_x = min(x), min_y = min(y), max_x = max(x), max_y = max(y))

ggplot() +
  geom_raster(data = ndvi_late_dry_df, 
                      aes(x = x, y = y, fill = ndvi_dry_discrete), 
                      alpha = 0.75) +
  scale_fill_brewer("NDVI", palette = "Greys", 
                    guide = guide_legend(reverse = TRUE)) +
  geom_point(data = buffalo_all |> filter(id == 2005),
            aes(x = x_, y = y_, colour = hour_t2)) +
  # geom_point(data = buffalo_all |> filter(id == 2005 & hour_t2 %in% 18:20),
  #           aes(x = x_, y = y_, colour = hour_t2)) +
  scale_x_continuous("Easting (m)", 
                     limits = c(min(plot_extent[[1]])-buffer, 
                                max(plot_extent[[3]])+buffer)) + 
  scale_y_continuous("Northing (m)", 
                     limits = c(min(plot_extent[[2]])-buffer, 
                                max(plot_extent[[4]])+buffer)) + 
  coord_equal() +
  theme_bw() +
  theme(legend.position = "right")


```

### To compare the observed buffalo data to the simulated data, select a subset of the buffalo data

```{r}

no_subset_locations <- 8760

# buffalo_all <- buffalo_all %>% filter(sl < 1250)

buffalo_id_subset <- buffalo_all %>% 
  filter(id == 2005) %>% 
  arrange(t_) |>  
  slice(1:no_subset_locations) #|> 
  # transmute(id = id, x = x_, y = y_, t = t_, hour = hour)

# time_vector = buffalo_id_subset$t_

```

## Import deep learning trajectories

```{r}

# dl_trajectory <- read_csv("Python/outputs/dl_trajectories/dl_trajectory_7641steps_1.csv")
# head(dl_trajectory)
# 
# ggplot() +
#   geom_path(data = dl_trajectory,
#             aes(x = x, y = y, colour = yday)) +
#   scale_colour_viridis_c() +
#   coord_equal() +
#   theme_bw()
# 
# # to convert to amt track:
# # - create a column for time in posixct from the hour and yday columns
# # dl_trajectory_amt <- dl_trajectory %>% mk_track(id = id,
# #                                                 lon,
# #                                            lat, 
# #                                            time, 
# #                                            all_cols = T,
# #                                            crs = 4326) %>% 
# #   transform_coords(crs_to = 3112, crs_from = 4326) # Transformation to GDA94 / 
# # # Geoscience Australia Lambert (https://epsg.io/3112)
# 
# sim_data_all <- dl_trajectory %>% 
#   mutate(id = "a") 

```

## Import multiple deep learning trajectories

```{r}

# read in multiple csv files with similar filenames and bind them together
sim_data_full_list <- 
  list.files("Python/outputs/dl_trajectories/ta_mix_monthly_ndvi/", pattern = "*.csv", full.names = T)

sim_data_filenames <- grep("", sim_data_full_list, value = T) %>% 
  grep("id2005", x = ., value = T) 

# to select a subset of the list of filenames for plotting
sim_data_all <- sim_data_filenames %>%  #[1:10]
  map_dfr(read_csv, .id = "id")


hist(sim_data_all$yday, breaks = 100)

# sim_data_all <- sim_data_all %>% 
#   mutate(yday = yday %% 366) # to match the buffalo data

hist(sim_data_all$yday, breaks = 100)

max(sim_data_all$yday)

# to check the initial locations of the simulated trajectories - 
# prior to removing the warmup period - these should be the same as the observed
# data
sim_data_all <- sim_data_all %>% group_by(id) %>% slice_head(n = no_subset_locations) %>% ungroup()

```

## Plot the trajectories

```{r}

buffer <- 2500

# set the extent of the plot
plot_extent <- sim_data_all %>%
  summarise(min_x = min(x), min_y = min(y), max_x = max(x), max_y = max(y))

ggplot() +
  geom_raster(data = ndvi_late_dry_df, 
                      aes(x = x, y = y, fill = ndvi_dry_discrete), 
                      alpha = 0.75) +
  scale_fill_brewer("NDVI", palette = "Greys", 
                    guide = guide_legend(reverse = TRUE)) +
  geom_path(data = sim_data_all,
            aes(x = x, y = y, colour = id), 
            alpha = 0.75, linewidth = 0.25) +
  geom_point(data = sim_data_all |> slice(1),
            aes(x = x, y = y), colour = "red") +
  scale_colour_viridis_d() +
  scale_x_continuous("Easting (m)", 
                     limits = c(min(plot_extent[[1]])-buffer, 
                                max(plot_extent[[3]])+buffer)) + 
  scale_y_continuous("Northing (m)", 
                     limits = c(min(plot_extent[[2]])-buffer, 
                                max(plot_extent[[4]])+buffer)) + 
  coord_equal() +
  theme_bw() +
  theme(legend.position = "none")

# ggsave("outputs/sim_data_all_ndvi.png", width = 150, height = 150, units = "mm", dpi = 600)

# sim_data_all <- sim_data_all %>% group_by transmute(id = id, x = x, y = y, t = rep(time_vector,10))

```

## Loop over trajectories

```{r}

# buffer <- 2500
# sim_ids <- unique(sim_data_all$id)
# 
# for(i in 1:length(sim_ids)) {
# 
#   # set the extent of the plot
#   plot_extent <- sim_data_all_subset  %>% filter(id == sim_ids[i]) %>%
#     summarise(min_x = min(x), min_y = min(y), max_x = max(x), max_y = max(y))
#   
#   ggplot() +
#     geom_raster(data = ndvi_late_dry_df, 
#                         aes(x = x, y = y, fill = ndvi_dry_discrete), 
#                         alpha = 0.75) +
#     scale_fill_brewer("NDVI", palette = "Greens", 
#                       guide = guide_legend(reverse = TRUE)) +
#     geom_path(data = sim_data_all_subset %>% filter(id == sim_ids[i]),
#               aes(x = x, y = y, colour = id), alpha = 0.75) +
#     geom_point(data = sim_data_all_subset |> slice(1),
#               aes(x = x, y = y), colour = "red") +
#     scale_colour_viridis_d() +
#     scale_x_continuous("Easting (m)", 
#                        limits = c(min(plot_extent[[1]])-buffer, 
#                                   max(plot_extent[[3]])+buffer)) + 
#     scale_y_continuous("Northing (m)", 
#                        limits = c(min(plot_extent[[2]])-buffer, 
#                                   max(plot_extent[[4]])+buffer)) + 
#     coord_equal() +
#     theme_bw() +
#     theme(legend.position = "none")
#   
#   ggsave(paste("outputs/sim_data_all_ndvi_sim", sim_ids[i], ".png"), width = 60, height = 100, units = "mm", dpi = 600)
#   
# }

```

## Combine the datasets

```{r}

# combine the observed and simulated data
all_data <- bind_rows(buffalo_id_subset, sim_data_all)

# ggplot() +
#   geom_path(data = sim_data_all,
#             aes(x = x, y = y, colour = id)) +
#   scale_colour_viridis_d() +
#   geom_path(data = buffalo_id_subset,
#             aes(x = x_, y = y_), colour = "red") +
#   coord_equal() +
#   theme_bw() +
#   theme(legend.position = "right")

ggplot() +
  geom_raster(data = ndvi_late_dry_df, 
                      aes(x = x, y = y, fill = ndvi_dry_discrete), 
                      alpha = 0.75) +
  scale_fill_brewer("NDVI", palette = "Greys", 
                    guide = guide_legend(reverse = TRUE)) +
  geom_path(data = sim_data_all,
            aes(x = x, y = y, colour = id), 
            alpha = 0.75, linewidth = 0.25) +
  scale_colour_viridis_d() +
  geom_path(data = buffalo_id_subset,
            aes(x = x_, y = y_), 
            alpha = 0.75, linewidth = 0.25, colour = "red") +
  geom_point(data = sim_data_all |> slice(1),
            aes(x = x, y = y), fill = "blue", shape = 23) +
  scale_x_continuous("Easting (m)", 
                     limits = c(min(plot_extent[[1]])-buffer, 
                                max(plot_extent[[3]])+buffer)) + 
  scale_y_continuous("Northing (m)", 
                     limits = c(min(plot_extent[[2]])-buffer, 
                                max(plot_extent[[4]])+buffer)) + 
  coord_equal() +
  theme_bw() +
  theme(legend.position = "none")

# ggsave("outputs/sim_data_all_buffalo_ndvi.png", width = 150, height = 150, units = "mm", dpi = 600)

```

## moveVis

```{r}

# install.packages("moveVis")
# library(moveVis)

```



## Calculate step lengths and turning angles etc

```{r}

# to select a subset of the list of filenames
# sim_data_all <- sim_data_filenames %>% 
#   map_dfr(read_csv, .id = "id")

dl_trajectory <- sim_data_all
# dl_trajectory <- buffalo_id_subset

hourly_lag <- 1

dl_trajectory <- dl_trajectory %>% mutate(
  
  x1 = x,
  y1 = y,
  x2 = lead(x1, n = hourly_lag, default = NA),
  y2 = lead(y1, n = hourly_lag, default = NA),
  date = as.Date(yday - 1, origin = "2018-01-01"),
  t1 = as.POSIXct(paste(date, hour), format = "%Y-%m-%d %H"),
  yday = lubridate::yday(t1),
  # t2_ = lead(t_, n = hourly_lag, default = NA),
  # t_diff = round(difftime(t2_, t_, units = "hours"),0),
  # hour_t1 = lubridate::hour(t_),
  # yday_t1 = lubridate::yday(t_),
  # hour_t2 = lubridate::hour(t2_),
  # yday_t2 = lubridate::yday(t2_),
  # hour = lubridate::hour(t),
  
  sl = c(sqrt(diff(y)^2 + diff(x)^2), NA),
  log_sl = log(sl),
  bearing1 = c(NA, atan2(diff(y), diff(x))),
  # ta = c(NA, ifelse(diff(bearing) > pi, diff(bearing) - 2 * pi, diff(bearing))),
  ta1 = c(NA, diff(bearing1)),
  ta_corr1 = c(ifelse(ta1 > pi, ta1-(2*pi), 
                     ifelse(ta1 < -pi, ta1+(2*pi),
                            ta1))),
  cos_ta = cos(ta1)
)

dl_trajectory <- dl_trajectory %>% filter(sl < 5000)
hist(dl_trajectory$sl)
max(dl_trajectory$sl, na.rm = T)

# dl_trajectory <- dl_trajectory %>% filter(sl < 1250)
head(dl_trajectory)

dl_trajectory %>% filter(id == 1)
hist(dl_trajectory$yday)

# dl_trajectory$date

```

## Checking the turning angles using amt

```{r}

dl_track <- dl_trajectory %>% amt::mk_track(id = id, x, y, t1, all_cols = T, crs = 3112) %>% arrange(id, t_)
# dl_track <- dl_trajectory %>% amt::mk_track(x, y, t1, all_cols = T, crs = 3112)
dl_steps <- dl_track %>% filter(id == 1) %>% amt::steps(keep_cols = "both")# %>% arrange(id, t_)
dl_steps

```

## Plot step lengths etc

```{r}

mean(dl_trajectory$sl, na.rm = T)
median(dl_trajectory$sl, na.rm = T)

ggplot() +
  geom_histogram(data = dl_trajectory,
                 aes(x = sl),
                 binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  # scale_x_continuous("Step length (m)", limits = c(0, 1500)) +
  scale_y_continuous("Frequency") +
  theme_bw()

ggplot() +
  geom_histogram(data = dl_trajectory,
                 aes(x = sl),
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  scale_x_log10("log Step length (m)") +
  scale_y_continuous("Frequency") +
  theme_bw()

# ggsave("outputs/step_length.png", width = 150, height = 75, units = "mm", dpi = 600)

ggplot() +
  geom_histogram(data = dl_trajectory,
                 aes(x = bearing1),
                 bins = 100,
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  theme_bw()

ggplot() +
  geom_histogram(data = dl_trajectory,
                 aes(x = ta1),
                 bins = 100,
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  scale_x_continuous("Turning angle (radians)") + #, limits = c(-pi, pi)
  scale_y_continuous("Frequency") +
  theme_bw()


ggplot() +
  geom_histogram(data = dl_trajectory,
                 aes(x = ta_corr1),
                 bins = 100,
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  scale_x_continuous("Turning angle (radians)") + #, limits = c(-pi, pi)
  scale_y_continuous("Frequency") +
  theme_bw()

ggplot() +
  geom_histogram(data = dl_steps,
                 aes(x = ta_),
                 bins = 100,
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
  scale_x_continuous("Turning angle (radians)") + #, limits = c(-pi, pi)
  scale_y_continuous("Frequency") +
  theme_bw()

# ggsave("outputs/turning_angle.png", width = 150, height = 75, units = "mm", dpi = 600)

```

For each hour of the day

```{r}

for(i in 0:23) {
print(ggplot() +
  geom_histogram(data = dl_trajectory |> filter(hour == i),
                 aes(x = sl),
                 binwidth = 25,
                 fill = "orange",
                 colour = "black") +
    scale_x_continuous(limits = c(0, 1500)) +
    ggtitle(paste0("Hour: ", i)) +
  theme_bw())
}

```

Turning angles

```{r}

for(i in 0:23) {
print(ggplot() +
  geom_histogram(data = dl_trajectory |> filter(hour == i),
                 aes(x = ta_corr1),
                 bins = 50,
                 # binwidth = 25,
                 fill = "orange",
                 colour = "black") +
    ggtitle(paste0("Hour: ", i)) +
  theme_bw())
}

```

## Plot step lengths etc against observed data

```{r}

mean(dl_trajectory$sl, na.rm = T)
median(dl_trajectory$sl, na.rm = T)

buffalo_id_subset_covs <- buffalo_all %>% 
  filter(id == 2005) %>% 
  arrange(t_) |>  
  slice(1:no_subset_locations)

ggplot() +
  geom_density(data = buffalo_id_subset_covs,
                 aes(x = sl),
                 fill = "skyblue", colour = "skyblue", alpha = 0.5) +
  geom_density(data = dl_trajectory,
                 aes(x = sl),
                 fill = "orange", colour = "orange", alpha = 0.5) +
  scale_x_continuous("Step length (m)", limits = c(0, 1500)) +
  scale_y_continuous("Density") +
  theme_bw()

ggsave("outputs/step_length.png", width = 90, height = 75, units = "mm", dpi = 600)


ggplot() +
  geom_density(data = buffalo_id_subset_covs,
                 aes(x = sl),
                 fill = "skyblue", colour = "skyblue", alpha = 0.5) +
  geom_density(data = dl_trajectory,
                 aes(x = sl),
                 fill = "orange", colour = "orange", alpha = 0.5) +
  scale_x_log10("log Step length (m)") +
  scale_y_continuous("Density") +
  theme_bw()

ggsave("outputs/step_length_log.png", width = 90, height = 75, units = "mm", dpi = 600)

ggplot() +
  geom_density(data = buffalo_id_subset_covs,
                 aes(x = ta),
                 fill = "skyblue", colour = "skyblue", alpha = 0.5) +
  geom_density(data = dl_trajectory,
                 aes(x = ta_corr1),
                 fill = "orange", colour = "orange", alpha = 0.5) +
  scale_x_continuous("Turning angle (radians)") +
  scale_y_continuous("Density") +
  theme_bw()

ggsave("outputs/turning_angles.png", width = 90, height = 75, units = "mm", dpi = 600)

# x <- seq(-12.5, 12.5, 0.1)
# plot(x, y = dnorm(x, mean = 0, sd = 6.5), type = "l")
# qnorm(c(0.025, 0.5, 0.975), mean = 0, sd = 6.5)

# ggsave("outputs/step_length.png", width = 150, height = 75, units = "mm", dpi = 600)

```

## Density of step lengths for each hour

```{r}

for(i in 0:23) {
  print(ggplot() +
    geom_density(data = buffalo_id_subset_covs |> filter(hour == i),
           aes(x = sl),
           fill = "skyblue", colour = "black", alpha = 0.5) +
    geom_density(data = dl_trajectory |> filter(hour == i),
                   aes(x = sl),
                   binwidth = 25,
                   fill = "orange", colour = "black", alpha = 0.5) +
      scale_x_continuous("Step length (m)", limits = c(0, 1500)) +
      ggtitle(paste0("Hour: ", i)) +
    theme_bw())
}

```

## Density of turning angles for each hour

```{r}

for(i in 0:23) {
  print(ggplot() +
    geom_density(data = buffalo_id_subset_covs |> filter(hour == i),
           aes(x = ta),
           fill = "skyblue", colour = "black", alpha = 0.5) +
    geom_density(data = dl_trajectory |> filter(hour == i),
                   aes(x = ta_corr1),
                   binwidth = 25,
                 fill = "orange", colour = "black", alpha = 0.5) +
      scale_x_continuous("Turning angle (radians)") +
      ggtitle(paste0("Hour: ", i)) +
    theme_bw())
}

```

## Extract covariate values at simulated locations

```{r}

# for the simulated data
dl_trajectory_xy <- data.frame("x" = dl_trajectory$x, "y" = dl_trajectory$y)

# Calculate ndvi_index for all rows at once using vectorized operation
dl_trajectory <- dl_trajectory %>%
  mutate(
    ndvi_index = vapply(t1, function(t) which.min(abs(difftime(t, terra::time(ndvi_projected)))), integer(1))
  )

# vapply(dl_trajectory$t1, function(t) which.min(abs(difftime(t, terra::time(ndvi_projected)))), integer(1))
# quantile(dl_trajectory$t1)

hist(dl_trajectory$ndvi_index)

ndvi_values_sim <- terra::extract(ndvi_projected[[ndvi_index]], dl_trajectory_xy)[,2]

# Extract raster data based on calculated ndvi_index
dl_trajectory <- dl_trajectory %>%
  mutate(
    ndvi = ndvi_values_sim,
    ndvi_late_dry = terra::extract(ndvi_late_dry, dl_trajectory_xy)[,2],
    slope = terra::extract(slope, dl_trajectory_xy)[,2],
    veg_herby = terra::extract(veg_herby, dl_trajectory_xy)[,2],
    canopy_cover = terra::extract(canopy_cover, dl_trajectory_xy)[,2]
  )


# for the observed data
buffalo_id_subset_xy <- data.frame("x" = buffalo_id_subset$x_, "y" = buffalo_id_subset$y_)

# Calculate ndvi_index for all rows at once using vectorized operation
buffalo_id_subset <- buffalo_id_subset %>%
  mutate(
    ndvi_index = vapply(t_, function(t) which.min(abs(difftime(t, terra::time(ndvi_projected)))), integer(1))
  )

hist(buffalo_id_subset$ndvi_index)

ndvi_values_buffalo <- terra::extract(ndvi_projected[[ndvi_index]], buffalo_id_subset_xy)[,2]

buffalo_id_subset <- buffalo_id_subset %>% mutate(
  ndvi = ndvi_values_buffalo,
  ndvi_late_dry = terra::extract(ndvi_late_dry, buffalo_id_subset_xy)[,2],
  slope = terra::extract(slope, buffalo_id_subset_xy)[,2],
  veg_herby = terra::extract(veg_herby, buffalo_id_subset_xy)[,2],
  canopy_cover = terra::extract(canopy_cover, buffalo_id_subset_xy)[,2]
)

```

## Assess the background parameters

```{r}



```


## Add the season to the dataframe




# Hourly movement behaviour and selection of covariates

Here we bin the trajectories into the hours of the day, and calculate the mean, median (where appropriate) and sd values for the step lengths and four habitat covariates.

We also save the results as a csv to compare between all of the models.

```{r}

buffalo_hourly_habitat <-
  buffalo_id_subset %>% 
  dplyr::group_by(hour, id) %>%
    summarise(n = n(),
              step_length_mean = mean(sl, na.rm = TRUE),
              step_length_median = median(sl, na.rm = TRUE),
              step_length_sd = sd(sl, na.rm = TRUE),
              ndvi_mean = mean(ndvi, na.rm = TRUE),
              ndvi_median = median(ndvi, na.rm = TRUE),
              ndvi_sd = sd(ndvi, na.rm = TRUE),
              ndvi_min = min(ndvi, na.rm = TRUE),
              ndvi_max = max(ndvi, na.rm = TRUE),
              ndvi_late_dry_mean = mean(ndvi_late_dry, na.rm = TRUE),
              ndvi_late_dry_median = median(ndvi_late_dry, na.rm = TRUE),
              ndvi_late_dry_sd = sd(ndvi_late_dry, na.rm = TRUE),
              herby_mean = mean(veg_herby, na.rm = TRUE),
              herby_sd = sd(veg_herby, na.rm = TRUE),
              canopy_mean = mean(canopy_cover/100, na.rm = TRUE),
              canopy_sd = sd(canopy_cover/100, na.rm = TRUE),
              canopy_min = min(canopy_cover/100, na.rm = TRUE),
              canopy_max = max(canopy_cover/100, na.rm = TRUE),
              slope_mean = mean(slope, na.rm = TRUE),
              slope_median = median(slope, na.rm = TRUE),
              slope_sd = sd(slope, na.rm = TRUE),
              slope_min = min(slope, na.rm = TRUE),
              slope_max = max(slope, na.rm = TRUE)
              ) %>% ungroup()

buffalo_hourly_habitat <- data.frame("Data" = "Buffalo", buffalo_hourly_habitat) %>%
  mutate(id = as.factor(id))

# write.csv(buffalo_hourly_habitat,
#           paste0("outputs/buffalo_summaries_hourly_habitat_", Sys.Date(), ".csv"))

buffalo_hourly_habitat_long <- buffalo_hourly_habitat %>%
  pivot_longer(cols = !c(Data, hour, id), names_to = "variable", values_to = "value")


dl_hourly_habitat <- 
  dl_trajectory %>% dplyr::group_by(hour, id) %>% 
    summarise(n = n(),
              step_length_mean = mean(sl, na.rm = TRUE),
              step_length_median = median(sl, na.rm = TRUE),
              step_length_sd = sd(sl, na.rm = TRUE),
              ndvi_mean = mean(ndvi, na.rm = TRUE),
              ndvi_median = median(ndvi, na.rm = TRUE),
              ndvi_sd = sd(ndvi, na.rm = TRUE),
              ndvi_min = min(ndvi, na.rm = TRUE),
              ndvi_max = max(ndvi, na.rm = TRUE),
              ndvi_late_dry_mean = mean(ndvi_late_dry, na.rm = TRUE),
              ndvi_late_dry_median = median(ndvi_late_dry, na.rm = TRUE),
              ndvi_late_dry_sd = sd(ndvi_late_dry, na.rm = TRUE),
              herby_mean = mean(veg_herby, na.rm = TRUE),
              herby_sd = sd(veg_herby, na.rm = TRUE),
              canopy_mean = mean(canopy_cover/100, na.rm = TRUE),
              canopy_sd = sd(canopy_cover/100, na.rm = TRUE),
              canopy_min = min(canopy_cover/100, na.rm = TRUE),
              canopy_max = max(canopy_cover/100, na.rm = TRUE),
              slope_mean = mean(slope, na.rm = TRUE),
              slope_median = median(slope, na.rm = TRUE),
              slope_sd = sd(slope, na.rm = TRUE),
              slope_min = min(slope, na.rm = TRUE),
              slope_max = max(slope, na.rm = TRUE)
              ) %>% ungroup()

dl_hourly_habitat <- data.frame("Data" = "deepSSF", dl_hourly_habitat) %>% 
  mutate(id = as.factor(id)) %>% arrange(id)

# write.csv(dl_hourly_habitat,
#           paste0("outputs/dl_summaries_hourly_habitat_", Sys.Date(), ".csv"))

dl_hourly_habitat_long <- dl_hourly_habitat %>%
  pivot_longer(cols = !c(Data, hour, id), names_to = "variable", values_to = "value")

# combine the dataframes
hourly_habitat_long <- bind_rows(buffalo_hourly_habitat_long, dl_hourly_habitat_long)

```

Plotting the hourly habitat selection

```{r}

for(i in 1:length(unique(hourly_habitat_long$variable))) {

  print(ggplot(data = hourly_habitat_long %>%
                 filter(variable == unique(variable)[i]),
               aes(x = factor(hour), y = value, colour = Data)) +
          geom_point(alpha = 0.5) +
          ggtitle(unique(hourly_habitat_long$variable)[i]) +
          theme_classic())

}

```

### A quantile ribbon approach

To express the stochasticity of the simulations, here we show the 25th to 50th quantiles and the 2.5th to 97.5th quantiles of the data. Remember that the `data' are the means for each hour for each trajectory, so the quantiles are calculated across the means for each hour.

This is the plotting approach that we used in the paper.

Here we create a ribbon from the 25th to 50th quantiles and from the 2.5th to 97.5th quantiles of the data

```{r}

hourly_summary_quantiles <- hourly_habitat_long %>% 
  dplyr::group_by(Data, hour, variable) %>% 
  summarise(n = n(), 
            mean = mean(value, na.rm = TRUE),
            sd = sd(value, na.rm = TRUE),
            q025 = quantile(value, probs = 0.025, na.rm = TRUE), 
            q25 = quantile(value, probs = 0.25, na.rm = TRUE),
            q50 = quantile(value, probs = 0.5, na.rm = TRUE), 
            q75 = quantile(value, probs = 0.75, na.rm = TRUE),
            q975 = quantile(value, probs = 0.975, na.rm = TRUE))

```

Here we show the hourly step length and selection of three of the habitat covariates. We use a dashed-line ribbon for the 95% interval and a solid-line ribbon for the 50% interval. We show the mean as a solid line.

It's quite a long plotting script...

```{r}

# set plotting parameters here that will change in each plot
buff_path_alpha <- 0.1
ribbon_95_alpha <- 0.5
ribbon_50_alpha <- 0.25
path_95_alpha <- 1

# set path alpha
buff_path_alpha <- 0.25

# linewidth
buff_path_linewidth <- 0.5

# Create color mapping
unique_groups <- unique(hourly_habitat_long$Data)
colors <- viridis(length(unique_groups))
names(colors) <- unique_groups
colors["Buffalo"] <- "skyblue"
colors["deepSSF"] <- "orange"

hourly_path_sl_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = hourly_habitat_long %>% 
              filter(Data == "Buffalo" & variable == "step_length_mean"),
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)),
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_y_continuous("Mean value") + 
  scale_x_continuous("Hour", breaks = seq(0,24,3)) +
  ggtitle("Step length (m)") +
  theme_bw() +
  theme(legend.position = "bottom")

hourly_path_sl_plot

ggsave("outputs/hourly_sl_legend.png", width = 90, height = 75, units = "mm", dpi = 600)
  
  
hourly_path_ndvi_late_dry_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = hourly_habitat_long %>% 
              filter(Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)),
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) +
  scale_colour_manual(values = colors) +
  scale_y_continuous("Mean value", 
                     limits = c(min(buffalo_hourly_habitat$ndvi_min), 
                                max(buffalo_hourly_habitat$ndvi_max))) +
  scale_x_continuous("Hour", breaks = seq(0,24,3)) +
  ggtitle("NDVI") +
  theme_bw()

hourly_path_ndvi_late_dry_plot


hourly_path_ndvi_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = hourly_habitat_long %>% 
              filter(Data == "Buffalo" & variable == "ndvi_mean"),
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)),
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) +
  scale_colour_manual(values = colors) +
  scale_y_continuous("Mean value", 
                     limits = c(min(buffalo_hourly_habitat$ndvi_min), 
                                max(buffalo_hourly_habitat$ndvi_max))) +
  scale_x_continuous("Hour", breaks = seq(0,24,3)) +
  ggtitle("NDVI") +
  theme_bw()

hourly_path_ndvi_plot
    
    
hourly_path_herby_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = hourly_habitat_long %>% 
              filter(Data == "Buffalo" & variable == "herby_mean"), 
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)), 
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_y_continuous("Mean value") +
  scale_x_continuous("Hour", breaks = seq(0,24,3)) +
  ggtitle("Herbaceous vegetation") +
  theme_bw()

hourly_path_herby_plot
    
    
hourly_path_canopy_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = hourly_habitat_long %>% 
              filter(Data == "Buffalo" & variable == "canopy_mean"), 
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)), 
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_y_continuous("Mean value", 
                     limits = c(min(buffalo_hourly_habitat$canopy_min), 
                                max(buffalo_hourly_habitat$canopy_max))) +
  scale_x_continuous("Hour", breaks = seq(0,24,3)) +
  ggtitle("Canopy cover") +
  theme_bw()

hourly_path_canopy_plot


hourly_path_slope_plot <- ggplot() +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "slope_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = hourly_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "slope_mean"),
              aes(x = hour, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  geom_path(data = hourly_habitat_long %>% 
              filter(Data == "Buffalo" & variable == "slope_mean"), 
                 aes(x = hour, y = value, colour = Data, group = interaction(id, Data)), 
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "slope_mean"),
              aes(x = hour, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = hourly_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "slope_mean"),
              aes(x = hour, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = hourly_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "slope_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
  
  geom_path(data = hourly_summary_quantiles %>%
              filter(!Data == "Buffalo" & variable == "slope_mean"),
              aes(x = hour, y = mean, colour = Data),
              linewidth = 1) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_y_continuous("Mean value", 
                     limits = c(min(buffalo_hourly_habitat$slope_min), 
                                max(buffalo_hourly_habitat$slope_max))) +
  scale_x_continuous("Hour", breaks = seq(0,24,3)) +
  ggtitle("Slope") +
  theme_bw()

hourly_path_slope_plot

```

Combining the hourly plots

```{r}

# # step lengths instead of slope
# ggarrange(hourly_path_sl_plot + 
#             theme(axis.title.x = element_blank(),
#                   axis.text.x = element_blank(),
#                   legend.title = element_blank()), 
#           
#           hourly_path_ndvi_plot + 
#             theme(axis.title.x = element_blank(),
#                   axis.text.x = element_blank(),
#                   axis.title.y = element_blank()), 
#           
#           hourly_path_herby_plot, 
#           
#           hourly_path_canopy_plot +
#             theme(axis.title.y = element_blank()),
#           
#           labels = c("A", "B", "C", "D"),
#           ncol = 2, nrow = 2,
#           legend = "bottom",
#           common.legend = TRUE)

# slope instead of step lengths
ggarrange(hourly_path_ndvi_plot + 
            theme(axis.title.x = element_blank(),
                  axis.text.x = element_blank(),
                  legend.title = element_blank()), 
          
          hourly_path_canopy_plot + 
            theme(axis.title.x = element_blank(),
                  axis.text.x = element_blank(),
                  axis.title.y = element_blank()), 
          
          hourly_path_herby_plot, 
          
          hourly_path_slope_plot +
            theme(axis.title.y = element_blank()),
          
          labels = c("A", "B", "C", "D"),
          ncol = 2, nrow = 2,
          legend = "bottom",
          common.legend = TRUE)

ggsave(paste0("outputs/hourly_summaries.png"), width=180, height=150, units="mm", dpi = 1000)

```

# Seasonal movement behaviour and selection of covariates

Here we bin the trajectories into the hours of the day, and calculate the mean, median (where appropriate) and sd values for the step lengths and four habitat covariates.

We also save the results as a csv to compare between all of the models.

```{r}

buffalo_daily_habitat <- buffalo_id_subset %>% 
  mutate(yday = yday(t_)) %>% 
  dplyr::group_by(yday, id) %>%
    summarise(n = n(),
              time = mean(t_),
              step_length_mean = mean(sl, na.rm = TRUE),
              step_length_median = median(sl, na.rm = TRUE),
              step_length_sd = sd(sl, na.rm = TRUE),
              ndvi_mean = mean(ndvi, na.rm = TRUE),
              ndvi_median = median(ndvi, na.rm = TRUE),
              ndvi_sd = sd(ndvi, na.rm = TRUE),
              ndvi_late_dry_mean = mean(ndvi_late_dry, na.rm = TRUE),
              ndvi_late_dry_median = median(ndvi_late_dry, na.rm = TRUE),
              ndvi_late_dry_sd = sd(ndvi_late_dry, na.rm = TRUE),
              herby_mean = mean(veg_herby, na.rm = TRUE),
              herby_sd = sd(veg_herby, na.rm = TRUE),
              canopy_mean = mean(canopy_cover/100, na.rm = TRUE),
              canopy_sd = sd(canopy_cover/100, na.rm = TRUE),
              slope_mean = mean(slope, na.rm = TRUE),
              slope_median = median(slope, na.rm = TRUE),
              slope_sd = sd(slope)
              ) %>% ungroup()

buffalo_daily_habitat <- data.frame("Data" = "Buffalo", buffalo_daily_habitat) %>%
  mutate(id = as.factor(id))

# write.csv(buffalo_daily_habitat,
#           paste0("outputs/buffalo_summaries_daily_habitat_", Sys.Date(), ".csv"))

buffalo_daily_habitat_long <- buffalo_daily_habitat %>%
  pivot_longer(cols = !c(Data, time, yday, id), names_to = "variable", values_to = "value")

hist(dl_trajectory$yday)

dl_daily_habitat <- dl_trajectory %>% 
  dplyr::group_by(yday, id) %>% 
  summarise(n = n(),
            time = mean(t1, na.rm = TRUE),
            step_length_mean = mean(sl, na.rm = TRUE),
            step_length_median = median(sl, na.rm = TRUE),
            step_length_sd = sd(sl, na.rm = TRUE),
            ndvi_mean = mean(ndvi, na.rm = TRUE),
            ndvi_median = median(ndvi, na.rm = TRUE),
            ndvi_sd = sd(ndvi, na.rm = TRUE),
            ndvi_late_dry_mean = mean(ndvi_late_dry, na.rm = TRUE),
            ndvi_late_dry_median = median(ndvi_late_dry, na.rm = TRUE),
            ndvi_late_dry_sd = sd(ndvi_late_dry, na.rm = TRUE),
            herby_mean = mean(veg_herby, na.rm = TRUE),
            herby_sd = sd(veg_herby, na.rm = TRUE),
            canopy_mean = mean(canopy_cover/100, na.rm = TRUE),
            canopy_sd = sd(canopy_cover/100, na.rm = TRUE),
            slope_mean = mean(slope, na.rm = TRUE),
            slope_median = median(slope, na.rm = TRUE),
            slope_sd = sd(slope)
            ) %>% ungroup()

dl_daily_habitat <- data.frame("Data" = "deepSSF", dl_daily_habitat) %>% 
  mutate(id = as.factor(id)) %>% arrange(id)

# write.csv(dl_daily_habitat,
#           paste0("outputs/dl_summaries_daily_habitat_", Sys.Date(), ".csv"))

dl_daily_habitat_long <- dl_daily_habitat %>%
  pivot_longer(cols = !c(Data, time, yday, id), names_to = "variable", values_to = "value")

# combine the dataframes
daily_habitat_long <- bind_rows(buffalo_daily_habitat_long, dl_daily_habitat_long)

```

Plotting the daily habitat selection

```{r}

for(i in 1:length(unique(daily_habitat_long$variable))) {

  print(ggplot(data = daily_habitat_long %>%
                 filter(variable == unique(variable)[i]),
               aes(x = time, y = value, colour = Data)) +
          geom_point(alpha = 0.05) +
          geom_smooth(method = "gam", se = TRUE) +
          ggtitle(unique(daily_habitat_long$variable)[i]) +
          theme_classic())

}

```

### A quantile ribbon approach

To express the stochasticity of the simulations, here we show the 25th to 50th quantiles and the 2.5th to 97.5th quantiles of the data. Remember that the `data' are the means for each yday for each trajectory, so the quantiles are calculated across the means for each yday.

This is the plotting approach that we used in the paper.

Here we create a ribbon from the 25th to 50th quantiles and from the 2.5th to 97.5th quantiles of the data

```{r}

# daily_summary_quantiles <- daily_habitat_long %>% 
#   dplyr::group_by(Data, yday, variable) %>% 
#   summarise(n = n(), 
#             mean = mean(value, na.rm = TRUE),
#             sd = sd(value, na.rm = TRUE),
#             q025 = quantile(value, probs = 0.025, na.rm = TRUE), 
#             q25 = quantile(value, probs = 0.25, na.rm = TRUE),
#             q50 = quantile(value, probs = 0.5, na.rm = TRUE), 
#             q75 = quantile(value, probs = 0.75, na.rm = TRUE),
#             q975 = quantile(value, probs = 0.975, na.rm = TRUE))

# use a larger grouping window of ydays
daily_summary_quantiles <- daily_habitat_long %>% 
  mutate(yday_group = ceiling(yday / 5)) %>%  # Groups of 5 days
  group_by(Data, yday_group, variable) %>% 
  summarise(
    n = n(), 
    time = mean(time, na.rm = TRUE),
    yday = mean(yday, na.rm = TRUE),
    mean = mean(value, na.rm = TRUE),
    sd = sd(value, na.rm = TRUE),
    q025 = quantile(value, probs = 0.025, na.rm = TRUE), 
    q25 = quantile(value, probs = 0.25, na.rm = TRUE),
    q50 = quantile(value, probs = 0.5, na.rm = TRUE), 
    q75 = quantile(value, probs = 0.75, na.rm = TRUE),
    q975 = quantile(value, probs = 0.975, na.rm = TRUE)
  )

# # use a moving window
# daily_summary_quantiles <- daily_habitat_long %>%
#   group_by(Data, variable) %>%
#   arrange(yday) %>%
#   mutate(mean = rollapply(value, width = 5, FUN = mean, na.rm = TRUE, align = "right", fill = NA),
#          sd = rollapply(value, width = 5, FUN = sd, na.rm = TRUE, align = "right", fill = NA),
#          q025 = rollapply(value, width = 5, FUN = function(x) quantile(x, probs = 0.025, na.rm = TRUE), align = "right", fill = NA),
#          q25 = rollapply(value, width = 5, FUN = function(x) quantile(x, probs = 0.25, na.rm = TRUE), align = "right", fill = NA),
#          q50 = rollapply(value, width = 5, FUN = function(x) quantile(x, probs = 0.5, na.rm = TRUE), align = "right", fill = NA),
#          q75 = rollapply(value, width = 5, FUN = function(x) quantile(x, probs = 0.75, na.rm = TRUE), align = "right", fill = NA),
#          q975 = rollapply(value, width = 5, FUN = function(x) quantile(x, probs = 0.975, na.rm = TRUE), align = "right", fill = NA)) %>%
#   ungroup()

daily_summary_quantiles <- daily_summary_quantiles %>% arrange(Data, time)

```

Here we show the daily step length and selection of three of the habitat covariates. We use a dashed-line ribbon for the 95% interval and a solid-line ribbon for the 50% interval. We show the mean as a solid line.

It's quite a long plotting script...

```{r}

# set plotting parameters here that will change in each plot
buff_path_alpha <- 0.1
ribbon_95_alpha <- 0.5
ribbon_50_alpha <- 0.25
path_95_alpha <- 1

# set path alpha
buff_path_alpha <- 0.25

# linewidth
buff_path_linewidth <- 0.5

# Create color mapping
unique_groups <- unique(daily_habitat_long$Data)
colors <- viridis(length(unique_groups))
names(colors) <- unique_groups
colors["Buffalo"] <- "skyblue"
colors["deepSSF"] <- "orange"

daily_path_sl_plot <- ggplot() +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  # geom_path(data = daily_habitat_long %>% 
  #             filter(Data == "Buffalo" & variable == "step_length_mean"),
  #                aes(x = time, y = value, colour = Data, group = interaction(id, Data)),
  #                alpha = buff_path_alpha,
  #             linewidth = buff_path_linewidth) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = time, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = time, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "step_length_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_y_continuous("Mean value") +
  scale_x_datetime("Date") +
  ggtitle("Step length (m)") +
  theme_bw() +
  theme(legend.position = "bottom")

daily_path_sl_plot

ggsave("outputs/daily_sl_legend.png", width = 90, height = 75, units = "mm", dpi = 600)
  
  
daily_path_ndvi_late_dry_plot <- ggplot() +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  # geom_path(data = daily_habitat_long %>% 
  #             filter(Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
  #                aes(x = time, y = value, colour = Data, group = interaction(id, Data)),
  #                alpha = buff_path_alpha,
  #             linewidth = buff_path_linewidth) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = time, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = time, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_late_dry_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
    
  scale_fill_manual(values = colors) +
  scale_colour_manual(values = colors) +
  scale_x_datetime("Date") +
  scale_y_continuous("Mean value") +
  ggtitle("NDVI late dry season") +
  theme_bw() +
  theme(legend.position = "bottom")

daily_path_ndvi_late_dry_plot


daily_path_ndvi_plot <- ggplot() +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  # geom_path(data = daily_habitat_long %>% 
  #             filter(Data == "Buffalo" & variable == "ndvi_mean"),
  #                aes(x = time, y = value, colour = Data, group = interaction(id, Data)),
  #                alpha = buff_path_alpha,
  #             linewidth = buff_path_linewidth) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = time, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = time, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "ndvi_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
    
  scale_fill_manual(values = colors) +
  scale_colour_manual(values = colors) +
  scale_x_datetime("Date") +
  scale_y_continuous("Mean value") +
  ggtitle("NDVI") +
  theme_bw() +
  theme(legend.position = "bottom")

daily_path_ndvi_plot
    
    
daily_path_herby_plot <- ggplot() +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "herby_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  # geom_path(data = daily_habitat_long %>% 
  #             filter(Data == "Buffalo" & variable == "herby_mean"), 
  #                aes(x = time, y = value, colour = Data, group = interaction(id, Data)), 
  #                alpha = buff_path_alpha,
  #             linewidth = buff_path_linewidth) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = time, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = time, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "herby_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "herby_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_x_datetime("Date") +
  scale_y_continuous("Mean value") +
  ggtitle("Herbaceous vegetation") +
  theme_bw() +
  theme(legend.position = "bottom")

daily_path_herby_plot
    
    
daily_path_canopy_plot <- ggplot() +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  # geom_path(data = daily_habitat_long %>% 
  #             filter(Data == "Buffalo" & variable == "canopy_mean"), 
  #                aes(x = time, y = value, colour = Data, group = interaction(id, Data)), 
  #                alpha = buff_path_alpha,
  #             linewidth = buff_path_linewidth) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = time, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = time, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "canopy_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_x_datetime("Date") +
  scale_y_continuous("Mean value") +
  ggtitle("Canopy cover") +
  theme_bw() +
  theme(legend.position = "bottom")

daily_path_canopy_plot


daily_path_slope_plot <- ggplot() +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(Data == "Buffalo" & variable == "slope_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +

  geom_ribbon(data = daily_summary_quantiles %>% 
                filter(!Data == "Buffalo" & variable == "slope_mean"),
              aes(x = time, ymin = q25, ymax = q75, fill = Data),
              alpha = ribbon_50_alpha) +
  
  # geom_path(data = daily_habitat_long %>% 
  #             filter(Data == "Buffalo" & variable == "slope_mean"), 
  #                aes(x = time, y = value, colour = Data, group = interaction(id, Data)), 
  #                alpha = buff_path_alpha,
  #             linewidth = buff_path_linewidth) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "slope_mean"), 
                 aes(x = time, y = mean, colour = Data), #, group = interaction(id, Data)), 
                 alpha = buff_path_alpha,
              linewidth = buff_path_linewidth) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "slope_mean"),
              aes(x = time, y = q025, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +

  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "slope_mean"),
              aes(x = time, y = q975, colour = Data),
            linetype = "dashed",
              alpha = path_95_alpha) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(Data == "Buffalo" & variable == "slope_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
  
  geom_path(data = daily_summary_quantiles %>% 
              filter(!Data == "Buffalo" & variable == "slope_mean"),
              aes(x = time, y = mean, colour = Data),
              linewidth = buff_path_linewidth) +
    
  scale_fill_manual(values = colors) + 
  scale_colour_manual(values = colors) +
  scale_x_datetime("Date") +
  scale_y_continuous("Mean value") +
  ggtitle("Slope") +
  theme_bw() +
  theme(legend.position = "bottom")

daily_path_slope_plot

```

Combining the daily plots

```{r}

ggarrange(daily_path_sl_plot + 
            theme(axis.title.x = element_blank(),
                  axis.text.x = element_blank(),
                  legend.title = element_blank()), 
          
          daily_path_ndvi_plot + 
            theme(axis.title.x = element_blank(),
                  axis.text.x = element_blank(),
                  axis.title.y = element_blank()), 
          
          daily_path_herby_plot, 
          
          daily_path_canopy_plot +
            theme(axis.title.y = element_blank()),
          
          labels = c("A", "B", "C", "D"),
          ncol = 2, nrow = 2,
          legend = "bottom",
          common.legend = TRUE)

ggsave(paste0("outputs/daily_summaries.png"), width=180, height=150, units="mm", dpi = 1000)

```