---
title: "Assessing deepSSF habitat selection predictions"
author: "Scott Forrest"
date: "`r Sys.Date()`"
execute: 
  cache: false
bibliography: references.bib
toc: true
number-sections: false
format: 
  html:
    self-contained: true
    code-fold: show
    code-tools: true
    df-print: paged
    code-line-numbers: true
    code-overflow: scroll
  pdf:
    geometry: 
      - top=30mm
      - left=30mm
editor:
  source
---

# Loading packages

```{r}
#| warning: false

library(tidyverse)
packages <- c("terra", "beepr", "tictoc", "viridis")
walk(packages, require, character.only = T)

```

# Load the habitat selection selection

The habitat selection probability values are from the `deepSSF_landscape_preds.ipynb` script. The predictions are stored in a CSV file that contains the NDVI, canopy cover, herbaceous vegetation, and slope values for each cell in the landscape. The predictions are stored as columns, one for each hour of the day.


```{r}

# Choose the day of the year that corresponds to the predictions
yday <- 225

habitat_selection <- read_csv(paste0("Python/outputs/id2005_hourly_habitat_suitability_landscape_subset_yday", yday, ".csv"))

# filter out the edge cells that were masked
habitat_selection <- habitat_selection %>% filter(!NDVI %in% c(Inf, -Inf))
head(habitat_selection)

```

## Tidy the data frame

Rescale the covariates to their original values and select a subset of the data to speed up the plotting process. As we're taking a subset there will be some random variation in the plots each time the script is run, although there are many cells so the results should be robust.

```{r}

# from the stack of local layers (Python script)
ndvi_max = 0.8220
ndvi_min = -0.2772
canopy_max = 82.5000
canopy_min = 0.0
herby_max = 1.0
herby_min = 0.0
slope_max = 12.2981
slope_min = 0.0006

habitat_selection_long_thinned <- habitat_selection %>% 
  
  # take a random sample of the data
  slice_sample(prop = 0.01) %>%
  
  # rescale the covariates to their original scale
  mutate(NDVI = (NDVI*(ndvi_max - ndvi_min) + ndvi_min),
         Canopy_cover = round((Canopy_cover*(canopy_max - canopy_min) + canopy_min), digits = 1),
         Herbaceous_vegetation = (Herbaceous_vegetation*(herby_max - herby_min) + herby_min),
         Slope = (Slope*(slope_max - slope_min) + slope_min)) %>% 
  
  # pivot the data frame to long format for plotting with ggplot
  pivot_longer(cols = -c(NDVI, Canopy_cover, Herbaceous_vegetation, Slope), 
               names_to = "Hour", values_to = "Values") %>% 
  
  # convert the hour column to numeric
  mutate(Hour = as.numeric(Hour))

head(habitat_selection_long_thinned)

```

### Check the distributions of the covariates

```{r}

hist(habitat_selection_long_thinned$NDVI, breaks = 100, main = "NDVI distribution")
hist(habitat_selection_long_thinned$Slope, breaks = 100, main = "Slope distribution")

NDVI_quantiles <- quantile(habitat_selection_long_thinned$NDVI, probs = c(0.01, 0.99))
slope_quantiles <- quantile(habitat_selection_long_thinned$Slope, probs = c(0.01, 0.99))

habitat_selection_long_thinned <- habitat_selection_long_thinned %>%
  filter(NDVI >= NDVI_quantiles[1] & NDVI <= NDVI_quantiles[2] & Slope >= slope_quantiles[1] & Slope <= slope_quantiles[2])

```

## Plot the covariate vs prediction values

::: {.panel-tabset}

## NDVI

```{r}

habitat_selection_long_thinned %>% filter(Hour == 1) %>%
  ggplot(aes(x = NDVI, y = Values)) +
  geom_point(size = 0.1, alpha = 0.5) +
  geom_smooth(method = "gam") +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "NDVI values",
    y = "Habitat selection"
    )

habitat_selection_long_thinned %>% filter(Hour == 7) %>%
  ggplot(aes(x = NDVI, y = Values)) +
  geom_point(size = 0.1, alpha = 0.5) +
  geom_smooth(method = "gam") +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "NDVI values",
    y = "Habitat selection"
    )

habitat_selection_long_thinned %>% filter(Hour == 12) %>%
  ggplot(aes(x = NDVI, y = Values)) +
  geom_point(size = 0.1, alpha = 0.5) +
  geom_smooth(method = "gam") +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "NDVI values",
    y = "Habitat selection"
    )

```

### All hours

```{r}

habitat_selection_long_thinned %>%
  ggplot(aes(x = NDVI, y = Values, colour = as.factor(Hour))) +
  geom_point(size = 0.1, alpha = 0.05) +
  geom_smooth(method = "gam") +
  scale_colour_viridis(discrete = T) +
  theme_bw() +
  theme(legend.position = "right") +
  labs(
    x = "NDVI values",
    y = "Habitat selection"
    )

```



```{r}

# Create the plot using stat_summary_2d and geom_tile
ggplot(habitat_selection_long_thinned, 
       aes(x = Hour, y = NDVI)) +  
  stat_summary_2d(aes(z = Values), fun = mean, bins = c(23,20)) + 
  scale_fill_viridis_c("Mean X Value") +  
  scale_x_continuous("Hour", breaks = seq(0,24,6)) +  
  scale_y_continuous("NDVI value") + 
  ggtitle(paste0("Prediction values: Day ", yday)) +
  theme_bw() +
  theme(legend.position = "right")

ggsave(paste0("outputs/ndvi_habitat_selection_yday", yday, ".png"), width = 90, height = 75, 
       units = "mm", dpi = 600)

```

## Canopy cover

```{r}

habitat_selection_long_thinned %>% filter(Hour == 1) %>%
  ggplot(aes(x = as.factor(Canopy_cover), y = Values)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(alpha = 0.5) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "Canopy cover (%)",
    y = "Habitat selection"
    )

habitat_selection_long_thinned %>% filter(Hour == 7) %>%
  ggplot(aes(x = as.factor(Canopy_cover), y = Values)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(alpha = 0.5) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "Canopy cover (%)",
    y = "Habitat selection"
    )

habitat_selection_long_thinned %>% filter(Hour == 12) %>%
  ggplot(aes(x = as.factor(Canopy_cover), y = Values)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(alpha = 0.5) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "Canopy cover (%)",
    y = "Habitat selection"
    )

```

### All hours

```{r}

habitat_selection_long_thinned %>%
  ggplot(aes(x = as.factor(Canopy_cover), y = Values, colour = as.factor(Hour))) +
  geom_boxplot(alpha = 0.05) +
  scale_colour_viridis(discrete = T) +
  theme_bw() +
  theme(legend.position = "none") +
  labs(
    x = "Canopy cover (%)",
    y = "Habitat selection"
    )

```

### Selection surface

```{r}

# Create the plot using stat_summary_2d and geom_tile
ggplot(habitat_selection_long_thinned, 
       aes(x = Hour, y = Canopy_cover)) +  
  stat_summary_2d(aes(z = Values), fun = mean, bins = c(23,15)) + 
  scale_fill_viridis_c("Mean X Value") +  
  scale_x_continuous("Hour", breaks = seq(0,24,6)) +  
  scale_y_continuous("Canopy cover (%)") + 
  ggtitle(paste0("Prediction values: Day ", yday)) +
  theme_bw() +
  theme(legend.position = "none")

```


## Herbaceous vegetation

```{r}

habitat_selection_long_thinned %>% filter(Hour == 1) %>%
  ggplot(aes(x = factor(Herbaceous_vegetation), y = Values)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(alpha = 0.5) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "Herbaceous vegetation",
    y = "Habitat selection"
    )

habitat_selection_long_thinned %>% filter(Hour == 7) %>%
  ggplot(aes(x = factor(Herbaceous_vegetation), y = Values)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(alpha = 0.5) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "Herbaceous vegetation",
    y = "Habitat selection"
    )

habitat_selection_long_thinned %>% filter(Hour == 12) %>%
  ggplot(aes(x = factor(Herbaceous_vegetation), y = Values)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(alpha = 0.5) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "Herbaceous vegetation",
    y = "Habitat selection"
    )

```

```{r}

# Create the plot using stat_summary_2d and geom_tile
ggplot(habitat_selection_long_thinned, 
       aes(x = Hour, y = Herbaceous_vegetation)) +  
  stat_summary_2d(aes(z = Values), fun = mean, bins = c(23, 2)) + 
  scale_fill_viridis_c("Mean X Value") +  
  scale_x_continuous("Hour", breaks = seq(0,24,6)) +  
  scale_y_continuous("Herbaceous vegetation") + 
  ggtitle(paste0("Prediction values: Day ", yday)) +
  theme_bw() +
  theme(legend.position = "none")

```


## Slope

```{r}

habitat_selection_long_thinned %>% filter(Hour == 1) %>%
  ggplot(aes(x = Slope, y = Values)) +
  geom_point(alpha = 0.05) +
  geom_smooth(method = "gam") +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "Slope",
    y = "Habitat selection"
    )

habitat_selection_long_thinned %>% filter(Hour == 7) %>%
  ggplot(aes(x = Slope, y = Values)) +
  geom_point(alpha = 0.05) +
  geom_smooth(method = "gam") +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "Slope",
    y = "Habitat selection"
    )

habitat_selection_long_thinned %>% filter(Hour == 12) %>%
  ggplot(aes(x = Slope, y = Values)) +
  geom_point(alpha = 0.05) +
  geom_smooth(method = "gam") +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(
    x = "Slope",
    y = "Habitat selection"
    )

```

## All hours

```{r}

habitat_selection_long_thinned %>%
  ggplot(aes(x = Slope, y = Values, colour = factor(Hour))) +
  geom_jitter(alpha = 0.05) +
  geom_smooth(method = "gam") +
  scale_colour_viridis(discrete = T) +
  theme_bw() +
  theme(legend.position = "none") +
  labs(
    x = "Slope",
    y = "Habitat selection"
    )

```


```{r}

# Create the plot using stat_summary_2d and geom_tile
ggplot(habitat_selection_long_thinned, aes(x = Hour, y = Slope)) +
  # stat_summary_hex(aes(z = Values), fun = mean, bins = 23) +  
  stat_summary_2d(aes(z = Values), fun = mean, bins = c(23,20)) + 
  scale_fill_viridis_c("Mean X Value") +
  scale_x_continuous("Hour", breaks = seq(0,24,6)) +  
  scale_y_continuous("Slope value") + #, limits = c(NDVI_quantiles[1], NDVI_quantiles[2])
  ggtitle(paste0("Prediction values: Day ", yday)) +
  theme_bw() +
  theme(legend.position = "none")

ggsave(paste0("outputs/slope_habitat_selection_yday", yday, ".png"), width = 90, height = 75, 
       units = "mm", dpi = 600)

```




:::
